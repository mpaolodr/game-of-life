{"version":3,"sources":["components/Cell.js","helpers/helpers.js","components/Controls.js","components/Features.js","components/Grid.js","App.js","index.js"],"names":["Cell","props","stateChange","grid","indexRow","indexCol","setGrid","color","canvasColor","className","onClick","style","backgroundColor","generateGrid","r","c","rows","i","push","Array","from","rowIndex","colIndex","cb","produce","gridCopy","operations","Controls","numRows","numCols","speed","speedUp","speedDown","useState","running","setRunning","genCount","setGenCount","runningRef","useRef","genCountRef","speedRef","numRowsRef","numColsRef","current","runSimulation","useCallback","g","j","neighbors","forEach","x","y","newI","newJ","setTimeout","Math","random","generateRandom","Features","setColor","setCanvasColor","setDimension","htmlFor","name","onChange","e","target","value","Grid","dimension","parseInt","split","setSpeed","useEffect","gridTemplateColumns","map","row","col","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAwBeA,EAtBF,SAACC,GAAW,IAErBC,EAOED,EAPFC,YACAC,EAMEF,EANFE,KACAC,EAKEH,EALFG,SACAC,EAIEJ,EAJFI,SACAC,EAGEL,EAHFK,QACAC,EAEEN,EAFFM,MACAC,EACEP,EADFO,YAGF,OACE,yBACEC,UAAU,OACVC,QAAS,kBAAMR,EAAYE,EAAUC,EAAUC,EAASH,IACxDQ,MAAO,CACLC,gBAAiBT,EAAKC,GAAUC,GAAYE,EAAQC,M,OCfrD,SAASK,EAAaC,EAAGC,GAG9B,IAFA,IAAMC,EAAO,GAEJC,EAAI,EAAGA,EAAIH,EAAGG,IACrBD,EAAKE,KAAKC,MAAMC,KAAKD,MAAMJ,IAAI,kBAAM,MAGvC,OAAOC,EAaF,SAASd,EAAYmB,EAAUC,EAAUC,EAAIpB,GAKlDoB,EAJgBC,YAAQrB,GAAM,SAACsB,GAC7BA,EAASJ,GAAUC,GAAYnB,EAAKkB,GAAUC,GAAY,EAAI,MCnBlE,IAAMI,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IA8FQC,EA3FE,SAAC1B,GAAW,IACnBK,EAAyDL,EAAzDK,QAASsB,EAAgD3B,EAAhD2B,QAASC,EAAuC5B,EAAvC4B,QAASC,EAA8B7B,EAA9B6B,MAAOC,EAAuB9B,EAAvB8B,QAASC,EAAc/B,EAAd+B,UADzB,EAGIC,oBAAS,GAHb,mBAGnBC,EAHmB,KAGVC,EAHU,OAIMF,mBAAS,GAJf,mBAInBG,EAJmB,KAITC,EAJS,KAMpBC,EAAaC,iBAAOL,GACpBM,EAAcD,iBAAOH,GACrBK,EAAWF,iBAAOT,GAClBY,EAAaH,iBAAOX,GACpBe,EAAaJ,iBAAOV,GAE1BS,EAAWM,QAAUV,EACrBM,EAAYI,QAAUR,EACtBK,EAASG,QAAUd,EACnBY,EAAWE,QAAUhB,EACrBe,EAAWC,QAAUf,EAErB,IAAMgB,EAAgBC,uBAAY,WAC3BR,EAAWM,UAIhBtC,GAAQ,SAACyC,GACP,OAAOvB,YAAQuB,GAAG,SAACtB,GACjB,IAD+B,IAAD,WACrBR,GACP,IAF4B,eAEnB+B,GACP,IAAIC,EAAY,EAEhBvB,EAAWwB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOpC,EAAIkC,EACXG,EAAON,EAAII,EAGfC,GAAQ,GACRA,EAAOX,EAAWE,SAClBU,GAAQ,GACRA,EAAOX,EAAWC,UAElBK,GAAaF,EAAEM,GAAMC,OAKrBL,EAAY,GAAKA,EAAY,EAC/BxB,EAASR,GAAG+B,GAAK,EACI,IAAZD,EAAE9B,GAAG+B,IAA0B,IAAdC,IAC1BxB,EAASR,GAAG+B,GAAK,IArBZA,EAAI,EAAGA,EAAIL,EAAWC,QAASI,IAAM,EAArCA,IADF/B,EAAI,EAAGA,EAAIyB,EAAWE,QAAS3B,IAAM,EAArCA,SA6BboB,EAAYG,EAAYI,QAAU,GAClCW,WAAWV,EAAeJ,EAASG,YAClC,IAWH,OACE,oCACE,yBAAKnC,UAAU,aACb,yBAAKA,UAAU,iBACb,4BACEC,QAAS,WACPyB,GAAYD,GACZI,EAAWM,SAAU,EACrBC,MAGDX,EAAU,OAAS,SAEtB,4BAAQxB,QAtBE,WAChBJ,EAAQO,EAAae,EAASC,IAC9BQ,EAAY,KAoBN,SACA,4BAAQ3B,QAlBG,WACjBJ,EDpEG,SAAwBQ,EAAGC,GAGhC,IAFA,IAAMC,EAAO,GAEJC,EAAI,EAAGA,EAAIH,EAAGG,IACrBD,EAAKE,KAAKC,MAAMC,KAAKD,MAAMJ,IAAI,kBAAOyC,KAAKC,SAAW,GAAM,EAAI,MAGlE,OAAOzC,EC6DG0C,CAAe9B,EAASC,MAiB1B,UACA,4BAAQnB,QAASqB,GAAjB,YACA,4BAAQrB,QAASsB,GAAjB,eAEF,uBAAGvB,UAAU,cAAb,eAAuC+B,EAAYI,YCnD5Ce,EAjDE,SAAC1D,GAAW,IACnB2D,EAA2C3D,EAA3C2D,SAAUC,EAAiC5D,EAAjC4D,eAAgBC,EAAiB7D,EAAjB6D,aAElC,OACE,yBAAKrD,UAAU,YACb,8BACE,2BAAOsD,QAAQ,SAAf,kBACA,4BACEC,KAAK,QACLC,SAAU,SAACC,GACTN,EAASM,EAAEC,OAAOC,SAGpB,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,QAGF,2BAAOL,QAAQ,gBAAf,oBACA,4BACEC,KAAK,eACLC,SAAU,SAACC,GACTL,EAAeK,EAAEC,OAAOC,SAG1B,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,SAGF,2BAAOL,QAAQ,aAAf,iBACA,4BACEC,KAAK,YACLC,SAAU,SAACC,GACTJ,EAAaI,EAAEC,OAAOC,SAGxB,4BAAQA,MAAM,SAAd,WACA,4BAAQA,MAAM,SAAd,WACA,4BAAQA,MAAM,SAAd,WACA,4BAAQA,MAAM,SAAd,WACA,4BAAQA,MAAM,SAAd,eCgDKC,EAlFF,WAAM,MAIiBpC,mBAAS,SAJ1B,mBAIVqC,EAJU,KAICR,EAJD,KAMXlC,EAAU2C,SAASD,EAAUE,MAAM,KAAK,GAAI,IAC5C3C,EAAU0C,SAASD,EAAUE,MAAM,KAAK,GAAI,IAPjC,EASOvC,oBAAS,WAC/B,OAAOpB,EAAae,EAASC,MAVd,mBASV1B,EATU,KASJG,EATI,OAaS2B,mBAAS,KAblB,mBAaVH,EAbU,KAaH2C,EAbG,OAcSxC,mBAAS,SAdlB,mBAcV1B,EAdU,KAcHqD,EAdG,OAeqB3B,mBAAS,SAf9B,mBAeVzB,EAfU,KAeGqD,EAfH,KAiBjBa,qBAAU,WACRpE,EAAQO,EAAae,EAASC,MAC7B,CAACyC,IAuBJ,OACE,oCACE,kBAAC,EAAD,CACEV,SAAUA,EACVC,eAAgBA,EAChBC,aAAcA,IAEhB,yBACErD,UAAU,OACVE,MAAO,CAAEgE,oBAAoB,UAAD,OAAY9C,EAAZ,aAE3B1B,EAAKyE,KAAI,SAACC,EAAK5D,GACd,OAAO4D,EAAID,KAAI,SAACE,EAAK9B,GACnB,OACE,kBAAC,EAAD,CACE+B,IAAG,cAAS9D,GAAT,OAAa+B,GAChB5C,SAAUa,EACVZ,SAAU2C,EACV9C,YAAaA,EACbC,KAAMA,EACNG,QAASA,EACTC,MAAOA,EACPC,YAAaA,WAMvB,kBAAC,EAAD,CACEF,QAASA,EACTsB,QAASA,EACTC,QAASA,EACTC,MAAOA,EACPC,QArDU,WAEZ0C,EADE3C,EAAQ,IACDA,EAAQ,IACRA,GAAS,KAAOA,EAAQ,GACxBA,EAAQ,GAER,KAgDPE,UA1CY,WAEdyC,EADE3C,GAAS,IACFA,EAAQ,IAER,UCjCAkD,MARf,WACE,OACE,yBAAKvE,UAAU,OACb,kBAAC,EAAD,QCLNwE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.947eb991.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Cell = (props) => {\r\n  const {\r\n    stateChange,\r\n    grid,\r\n    indexRow,\r\n    indexCol,\r\n    setGrid,\r\n    color,\r\n    canvasColor,\r\n  } = props;\r\n\r\n  return (\r\n    <div\r\n      className=\"cell\"\r\n      onClick={() => stateChange(indexRow, indexCol, setGrid, grid)}\r\n      style={{\r\n        backgroundColor: grid[indexRow][indexCol] ? color : canvasColor,\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import produce from \"immer\";\r\n\r\n// function to initialize empty grid with 0s\r\nexport function generateGrid(r, c) {\r\n  const rows = [];\r\n\r\n  for (let i = 0; i < r; i++) {\r\n    rows.push(Array.from(Array(c), () => 0));\r\n  }\r\n\r\n  return rows;\r\n}\r\n\r\nexport function generateRandom(r, c) {\r\n  const rows = [];\r\n\r\n  for (let i = 0; i < r; i++) {\r\n    rows.push(Array.from(Array(c), () => (Math.random() > 0.8 ? 1 : 0)));\r\n  }\r\n\r\n  return rows;\r\n}\r\n\r\nexport function stateChange(rowIndex, colIndex, cb, grid) {\r\n  const newGrid = produce(grid, (gridCopy) => {\r\n    gridCopy[rowIndex][colIndex] = grid[rowIndex][colIndex] ? 0 : 1;\r\n  });\r\n\r\n  cb(newGrid);\r\n}\r\n","import React, { useState, useRef, useCallback } from \"react\";\r\nimport produce from \"immer\";\r\n\r\n// helpers\r\nimport { generateGrid, generateRandom } from \"../helpers/helpers.js\";\r\n\r\nconst operations = [\r\n  [0, 1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 1],\r\n  [1, 1],\r\n  [-1, -1],\r\n  [1, 0],\r\n  [-1, 0],\r\n];\r\n\r\nconst Controls = (props) => {\r\n  const { setGrid, numRows, numCols, speed, speedUp, speedDown } = props;\r\n\r\n  const [running, setRunning] = useState(false);\r\n  const [genCount, setGenCount] = useState(0);\r\n\r\n  const runningRef = useRef(running);\r\n  const genCountRef = useRef(genCount);\r\n  const speedRef = useRef(speed);\r\n  const numRowsRef = useRef(numRows);\r\n  const numColsRef = useRef(numCols);\r\n\r\n  runningRef.current = running;\r\n  genCountRef.current = genCount;\r\n  speedRef.current = speed;\r\n  numRowsRef.current = numRows;\r\n  numColsRef.current = numCols;\r\n\r\n  const runSimulation = useCallback(() => {\r\n    if (!runningRef.current) {\r\n      return;\r\n    }\r\n\r\n    setGrid((g) => {\r\n      return produce(g, (gridCopy) => {\r\n        for (let i = 0; i < numRowsRef.current; i++) {\r\n          for (let j = 0; j < numColsRef.current; j++) {\r\n            let neighbors = 0;\r\n\r\n            operations.forEach(([x, y]) => {\r\n              const newI = i + x;\r\n              const newJ = j + y;\r\n\r\n              if (\r\n                newI >= 0 &&\r\n                newI < numRowsRef.current &&\r\n                newJ >= 0 &&\r\n                newJ < numColsRef.current\r\n              ) {\r\n                neighbors += g[newI][newJ];\r\n              }\r\n            });\r\n\r\n            // rules\r\n            if (neighbors < 2 || neighbors > 3) {\r\n              gridCopy[i][j] = 0;\r\n            } else if (g[i][j] === 0 && neighbors === 3) {\r\n              gridCopy[i][j] = 1;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    setGenCount(genCountRef.current + 1);\r\n    setTimeout(runSimulation, speedRef.current);\r\n  }, []);\r\n\r\n  const clearGrid = () => {\r\n    setGrid(generateGrid(numRows, numCols));\r\n    setGenCount(0);\r\n  };\r\n\r\n  const randomGrid = () => {\r\n    setGrid(generateRandom(numRows, numCols));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"interface\">\r\n        <div className=\"btn-container\">\r\n          <button\r\n            onClick={() => {\r\n              setRunning(!running);\r\n              runningRef.current = true;\r\n              runSimulation();\r\n            }}\r\n          >\r\n            {running ? \"Stop\" : \"Start\"}\r\n          </button>\r\n          <button onClick={clearGrid}>Clear</button>\r\n          <button onClick={randomGrid}>Random</button>\r\n          <button onClick={speedUp}>Speed Up</button>\r\n          <button onClick={speedDown}>Speed Down</button>\r\n        </div>\r\n        <p className=\"generation\">Generation: {genCountRef.current}</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import React from \"react\";\r\n\r\nconst Features = (props) => {\r\n  const { setColor, setCanvasColor, setDimension } = props;\r\n\r\n  return (\r\n    <div className=\"features\">\r\n      <form>\r\n        <label htmlFor=\"color\">Set Cell Color</label>\r\n        <select\r\n          name=\"color\"\r\n          onChange={(e) => {\r\n            setColor(e.target.value);\r\n          }}\r\n        >\r\n          <option value=\"black\">Black</option>\r\n          <option value=\"blue\">Blue</option>\r\n          <option value=\"pink\">Pink</option>\r\n          <option value=\"red\">Red</option>\r\n        </select>\r\n\r\n        <label htmlFor=\"canvas-color\">Set Canvas Color</label>\r\n        <select\r\n          name=\"canvas-color\"\r\n          onChange={(e) => {\r\n            setCanvasColor(e.target.value);\r\n          }}\r\n        >\r\n          <option value=\"white\">White</option>\r\n          <option value=\"black\">Black</option>\r\n          <option value=\"gray\">Gray</option>\r\n        </select>\r\n\r\n        <label htmlFor=\"dimension\">Set Dimension</label>\r\n        <select\r\n          name=\"dimension\"\r\n          onChange={(e) => {\r\n            setDimension(e.target.value);\r\n          }}\r\n        >\r\n          <option value=\"45x45\">45 x 45</option>\r\n          <option value=\"40x40\">40 x 40</option>\r\n          <option value=\"35x35\">35 x 35</option>\r\n          <option value=\"30x30\">30 x 30</option>\r\n          <option value=\"25x25\">25 x 25</option>\r\n        </select>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Features;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n// components\r\nimport Cell from \"./Cell.js\";\r\nimport Controls from \"./Controls.js\";\r\nimport Features from \"./Features.js\";\r\n\r\n// helper functions\r\nimport { generateGrid, stateChange } from \"../helpers/helpers.js\";\r\n\r\nconst Grid = () => {\r\n  // const numRows = 45;\r\n  // const numCols = 45;\r\n\r\n  const [dimension, setDimension] = useState(\"45x45\");\r\n\r\n  const numRows = parseInt(dimension.split(\"x\")[0], 10);\r\n  const numCols = parseInt(dimension.split(\"x\")[1], 10);\r\n\r\n  const [grid, setGrid] = useState(() => {\r\n    return generateGrid(numRows, numCols);\r\n  });\r\n\r\n  const [speed, setSpeed] = useState(500);\r\n  const [color, setColor] = useState(\"black\");\r\n  const [canvasColor, setCanvasColor] = useState(\"white\");\r\n\r\n  useEffect(() => {\r\n    setGrid(generateGrid(numRows, numCols));\r\n  }, [dimension]);\r\n\r\n  // speed up function\r\n  const speedUp = () => {\r\n    if (speed > 100) {\r\n      setSpeed(speed - 100);\r\n    } else if (speed <= 100 && speed > 10) {\r\n      setSpeed(speed - 10);\r\n    } else {\r\n      setSpeed(10);\r\n    }\r\n  };\r\n\r\n  // speed down function\r\n\r\n  const speedDown = () => {\r\n    if (speed <= 1000) {\r\n      setSpeed(speed + 100);\r\n    } else {\r\n      setSpeed(1000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Features\r\n        setColor={setColor}\r\n        setCanvasColor={setCanvasColor}\r\n        setDimension={setDimension}\r\n      />\r\n      <div\r\n        className=\"grid\"\r\n        style={{ gridTemplateColumns: `repeat(${numCols}, 15px)` }}\r\n      >\r\n        {grid.map((row, i) => {\r\n          return row.map((col, j) => {\r\n            return (\r\n              <Cell\r\n                key={`cell${i}${j}`}\r\n                indexRow={i}\r\n                indexCol={j}\r\n                stateChange={stateChange}\r\n                grid={grid}\r\n                setGrid={setGrid}\r\n                color={color}\r\n                canvasColor={canvasColor}\r\n              />\r\n            );\r\n          });\r\n        })}\r\n      </div>\r\n      <Controls\r\n        setGrid={setGrid}\r\n        numRows={numRows}\r\n        numCols={numCols}\r\n        speed={speed}\r\n        speedUp={speedUp}\r\n        speedDown={speedDown}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\n\nimport \"./App.scss\";\n\n// components\nimport Grid from \"./components/Grid.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}