{"version":3,"sources":["components/Cell.js","helpers/helpers.js","components/Controls.js","components/Features.js","components/Grid.js","App.js","index.js"],"names":["Cell","props","stateChange","grid","indexRow","indexCol","setGrid","color","canvasColor","running","className","onClick","style","backgroundColor","generateGrid","r","c","rows","i","push","Array","from","rowIndex","colIndex","cb","produce","gridCopy","operations","Controls","numRows","numCols","speed","speedUp","speedDown","setRunning","useState","genCount","setGenCount","runningRef","useRef","genCountRef","speedRef","numRowsRef","numColsRef","current","runSimulation","useCallback","g","j","neighbors","forEach","x","y","newI","newJ","setTimeout","Math","random","generateRandom","Features","setColor","setCanvasColor","setDimension","htmlFor","name","onChange","e","target","value","Grid","dimension","parseInt","split","setSpeed","useEffect","gridTemplateColumns","map","row","col","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f93e8ec.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Cell = (props) => {\r\n  const {\r\n    stateChange,\r\n    grid,\r\n    indexRow,\r\n    indexCol,\r\n    setGrid,\r\n    color,\r\n    canvasColor,\r\n    running,\r\n  } = props;\r\n\r\n  return (\r\n    <div\r\n      className=\"cell\"\r\n      onClick={() => {\r\n        if (running === false) {\r\n          stateChange(indexRow, indexCol, setGrid, grid);\r\n        }\r\n      }}\r\n      style={{\r\n        backgroundColor: grid[indexRow][indexCol] ? color : canvasColor,\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import produce from \"immer\";\r\n\r\n// function to initialize empty grid with 0s\r\nexport function generateGrid(r, c) {\r\n  const rows = [];\r\n\r\n  for (let i = 0; i < r; i++) {\r\n    rows.push(Array.from(Array(c), () => 0));\r\n  }\r\n\r\n  return rows;\r\n}\r\n\r\nexport function generateRandom(r, c) {\r\n  const rows = [];\r\n\r\n  for (let i = 0; i < r; i++) {\r\n    rows.push(Array.from(Array(c), () => (Math.random() > 0.8 ? 1 : 0)));\r\n  }\r\n\r\n  return rows;\r\n}\r\n\r\nexport function stateChange(rowIndex, colIndex, cb, grid) {\r\n  const newGrid = produce(grid, (gridCopy) => {\r\n    gridCopy[rowIndex][colIndex] = grid[rowIndex][colIndex] ? 0 : 1;\r\n  });\r\n\r\n  cb(newGrid);\r\n}\r\n","import React, { useState, useRef, useCallback } from \"react\";\r\nimport produce from \"immer\";\r\n\r\n// helpers\r\nimport { generateGrid, generateRandom } from \"../helpers/helpers.js\";\r\n\r\nconst operations = [\r\n  [0, 1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 1],\r\n  [1, 1],\r\n  [-1, -1],\r\n  [1, 0],\r\n  [-1, 0],\r\n];\r\n\r\nconst Controls = (props) => {\r\n  const {\r\n    setGrid,\r\n    numRows,\r\n    numCols,\r\n    speed,\r\n    speedUp,\r\n    speedDown,\r\n    running,\r\n    setRunning,\r\n  } = props;\r\n\r\n  const [genCount, setGenCount] = useState(0);\r\n\r\n  // create references to state variables\r\n  const runningRef = useRef(running);\r\n  const genCountRef = useRef(genCount);\r\n  const speedRef = useRef(speed);\r\n  const numRowsRef = useRef(numRows);\r\n  const numColsRef = useRef(numCols);\r\n\r\n  // refs so that values used by runSimulation function will always be updated even after running it once\r\n  runningRef.current = running;\r\n  genCountRef.current = genCount;\r\n  speedRef.current = speed;\r\n  numRowsRef.current = numRows;\r\n  numColsRef.current = numCols;\r\n\r\n  const runSimulation = useCallback(() => {\r\n    if (!runningRef.current) {\r\n      return;\r\n    }\r\n\r\n    setGrid((g) => {\r\n      return produce(g, (gridCopy) => {\r\n        for (let i = 0; i < numRowsRef.current; i++) {\r\n          for (let j = 0; j < numColsRef.current; j++) {\r\n            let neighbors = 0;\r\n\r\n            operations.forEach(([x, y]) => {\r\n              const newI = i + x;\r\n              const newJ = j + y;\r\n\r\n              // check if index is not out of the grid system setup\r\n              if (\r\n                newI >= 0 &&\r\n                newI < numRowsRef.current &&\r\n                newJ >= 0 &&\r\n                newJ < numColsRef.current\r\n              ) {\r\n                neighbors += g[newI][newJ];\r\n              }\r\n            });\r\n\r\n            // rules\r\n            if (neighbors < 2 || neighbors > 3) {\r\n              gridCopy[i][j] = 0;\r\n            } else if (g[i][j] === 0 && neighbors === 3) {\r\n              gridCopy[i][j] = 1;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    setGenCount(genCountRef.current + 1);\r\n    setTimeout(runSimulation, speedRef.current);\r\n  }, []);\r\n\r\n  // reset grid and generation counter\r\n  const clearGrid = () => {\r\n    setGrid(generateGrid(numRows, numCols));\r\n    setGenCount(0);\r\n  };\r\n\r\n  // generate random cells\r\n  const randomGrid = () => {\r\n    setGrid(generateRandom(numRows, numCols));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"interface\">\r\n        <div className=\"btn-container\">\r\n          <button\r\n            onClick={() => {\r\n              setRunning(!running);\r\n              runningRef.current = true;\r\n              runSimulation();\r\n            }}\r\n          >\r\n            {running ? \"Stop\" : \"Start\"}\r\n          </button>\r\n          <button onClick={clearGrid}>Clear</button>\r\n          <button onClick={randomGrid}>Random</button>\r\n          <button onClick={speedUp}>Speed Up</button>\r\n          <button onClick={speedDown}>Speed Down</button>\r\n        </div>\r\n        <p className=\"generation\">Generation: {genCountRef.current}</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import React from \"react\";\r\n\r\nconst Features = (props) => {\r\n  const { setColor, setCanvasColor, setDimension, running } = props;\r\n\r\n  return (\r\n    <div className=\"features\">\r\n      <form>\r\n        <label htmlFor=\"color\">Set Cell Color</label>\r\n        <select\r\n          name=\"color\"\r\n          onChange={(e) => {\r\n            if (running === false) {\r\n              setColor(e.target.value);\r\n            }\r\n          }}\r\n        >\r\n          <option value=\"black\">Black</option>\r\n          <option value=\"blue\">Blue</option>\r\n          <option value=\"pink\">Pink</option>\r\n          <option value=\"red\">Red</option>\r\n        </select>\r\n\r\n        <label htmlFor=\"canvas-color\">Set Canvas Color</label>\r\n        <select\r\n          name=\"canvas-color\"\r\n          onChange={(e) => {\r\n            if (running === false) {\r\n              setCanvasColor(e.target.value);\r\n            }\r\n          }}\r\n        >\r\n          <option value=\"gray\">Gray</option>\r\n          <option value=\"black\">Black</option>\r\n          <option value=\"blue\">Blue</option>\r\n        </select>\r\n\r\n        <label htmlFor=\"dimension\">Set Dimension</label>\r\n        <select\r\n          name=\"dimension\"\r\n          onChange={(e) => {\r\n            if (running === false) {\r\n              setDimension(e.target.value);\r\n            }\r\n          }}\r\n        >\r\n          <option value=\"60x60\">60 x 60</option>\r\n          <option value=\"50x50\">50 x 50</option>\r\n          <option value=\"40x40\">40 x 40</option>\r\n          <option value=\"30x30\">30 x 30</option>\r\n          <option value=\"20x20\">20 x 20</option>\r\n        </select>\r\n      </form>\r\n\r\n      <div className=\"rules\">\r\n        <h3 className=\"rules-heading\">Rules:</h3>\r\n\r\n        <p className=\"rules-desc\">\r\n          1. If a cell(individual square) is alive, it will die if it has 4 or\r\n          more neighbors <span>OR</span> if it only has one or less neighbor\r\n        </p>\r\n        <p className=\"rules-desc\">\r\n          2. If a cell is dead, it will come to life if it has{\" \"}\r\n          <span>EXACTLY</span> 3 alive neighbors\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Features;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n// components\r\nimport Cell from \"./Cell.js\";\r\nimport Controls from \"./Controls.js\";\r\nimport Features from \"./Features.js\";\r\n\r\n// helper functions\r\nimport { generateGrid, stateChange } from \"../helpers/helpers.js\";\r\n\r\nconst Grid = () => {\r\n  const [dimension, setDimension] = useState(\"60x60\");\r\n\r\n  const numRows = parseInt(dimension.split(\"x\")[0], 10);\r\n  const numCols = parseInt(dimension.split(\"x\")[1], 10);\r\n\r\n  // set grid\r\n  const [grid, setGrid] = useState(() => {\r\n    return generateGrid(numRows, numCols);\r\n  });\r\n\r\n  // default settings\r\n  const [speed, setSpeed] = useState(500);\r\n  const [color, setColor] = useState(\"black\");\r\n  const [canvasColor, setCanvasColor] = useState(\"gray\");\r\n  const [running, setRunning] = useState(false);\r\n\r\n  // reset grid when user changes dimension\r\n  useEffect(() => {\r\n    setGrid(generateGrid(numRows, numCols));\r\n  }, [dimension]);\r\n\r\n  // speed up function\r\n  // decrease number of milliseconds getting passed to setTimeout function\r\n  const speedUp = () => {\r\n    if (speed > 100) {\r\n      setSpeed(speed - 100);\r\n    } else if (speed <= 100 && speed > 10) {\r\n      setSpeed(speed - 10);\r\n    } else {\r\n      setSpeed(10);\r\n    }\r\n  };\r\n\r\n  // speed down function\r\n  // increase number of milliseconds to slow down animation\r\n  const speedDown = () => {\r\n    if (speed <= 1000) {\r\n      setSpeed(speed + 100);\r\n    } else {\r\n      setSpeed(1000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Features\r\n        setColor={setColor}\r\n        setCanvasColor={setCanvasColor}\r\n        setDimension={setDimension}\r\n        running={running}\r\n      />\r\n      <div\r\n        className=\"grid\"\r\n        style={{ gridTemplateColumns: `repeat(${numCols}, 10px)` }}\r\n      >\r\n        {grid.map((row, i) => {\r\n          return row.map((col, j) => {\r\n            return (\r\n              <Cell\r\n                key={`cell${i}${j}`}\r\n                indexRow={i}\r\n                indexCol={j}\r\n                stateChange={stateChange}\r\n                grid={grid}\r\n                setGrid={setGrid}\r\n                color={color}\r\n                canvasColor={canvasColor}\r\n                running={running}\r\n              />\r\n            );\r\n          });\r\n        })}\r\n      </div>\r\n      <Controls\r\n        setGrid={setGrid}\r\n        numRows={numRows}\r\n        numCols={numCols}\r\n        speed={speed}\r\n        speedUp={speedUp}\r\n        speedDown={speedDown}\r\n        running={running}\r\n        setRunning={setRunning}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\n\nimport \"./App.scss\";\n\n// components\nimport Grid from \"./components/Grid.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}